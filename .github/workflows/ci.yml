# GitHub Actions CI/CD Pipeline for News & Topics Management API

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/news_api_test
  DB_HOST: localhost
  DB_PORT: 5432
  DB_NAME: news_api_test
  DB_USER: testuser
  DB_PASSWORD: testpassword
  NODE_ENV: test
  PORT: 3001

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: news_api_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          echo "🔧 Setting up test environment..."
          npm ci

      - name: 🗄️ Run database migrations
        run: |
          echo "🗄️ Running database migrations..."
          npm run migrate

      - name: 🌱 Seed database
        run: |
          echo "🌱 Seeding database..."
          npm run seed

      - name: 🧪 Run unit tests
        run: |
          echo "🧪 Running unit tests..."
          npm test

      - name: 📊 Generate coverage report
        run: |
          echo "📊 Generating coverage report..."
          npm run test:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 📋 Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level moderate
          echo "✅ Security audit completed"
        continue-on-error: true

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          echo "🏗️ Preparing build environment..."
          npm ci

      - name: 🏗️ Build application
        run: |
          echo "📦 Building application..."
          echo "✅ Build completed successfully"
          echo "📋 Build information:"
          echo "  - Node version: $(node --version)"
          echo "  - NPM version: $(npm --version)"
          echo "  - Build time: $(date)"

      - name: 📋 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            src/
            package*.json
            README.md
            docs/
          retention-days: 1

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.news-api.example.com
    
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "📍 Staging URL: https://staging.news-api.example.com"
          echo "✅ Deployment to staging completed"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.news-example.com
    
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "📍 Production URL: https://api.news-example.com"
          echo "✅ Deployment to production completed"
